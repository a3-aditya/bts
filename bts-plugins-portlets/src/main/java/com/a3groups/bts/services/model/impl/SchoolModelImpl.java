package com.a3groups.bts.services.model.impl;

import com.a3groups.bts.services.model.School;
import com.a3groups.bts.services.model.SchoolModel;
import com.a3groups.bts.services.model.SchoolSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the School service. Represents a row in the &quot;BTS_School&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.a3groups.bts.services.model.SchoolModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SchoolImpl}.
 * </p>
 *
 * @author A3 Groups Inc.
 * @see SchoolImpl
 * @see com.a3groups.bts.services.model.School
 * @see com.a3groups.bts.services.model.SchoolModel
 * @generated
 */
@JSON(strict = true)
public class SchoolModelImpl extends BaseModelImpl<School>
    implements SchoolModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a school model instance should use the {@link com.a3groups.bts.services.model.School} interface instead.
     */
    public static final String TABLE_NAME = "BTS_School";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.INTEGER },
            { "name", Types.VARCHAR },
            { "address", Types.VARCHAR },
            { "district", Types.VARCHAR },
            { "city", Types.VARCHAR },
            { "state_", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table BTS_School (id_ INTEGER not null primary key,name VARCHAR(75) null,address VARCHAR(75) null,district VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table BTS_School";
    public static final String ORDER_BY_JPQL = " ORDER BY school.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY BTS_School.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.a3groups.bts.services.model.School"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.a3groups.bts.services.model.School"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.a3groups.bts.services.model.School"),
            true);
    public static long CITY_COLUMN_BITMASK = 1L;
    public static long DISTRICT_COLUMN_BITMASK = 2L;
    public static long STATE_COLUMN_BITMASK = 4L;
    public static long ID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.a3groups.bts.services.model.School"));
    private static ClassLoader _classLoader = School.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { School.class };
    private int _id;
    private String _name;
    private String _address;
    private String _district;
    private String _originalDistrict;
    private String _city;
    private String _originalCity;
    private String _state;
    private String _originalState;
    private long _columnBitmask;
    private School _escapedModel;

    public SchoolModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static School toModel(SchoolSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        School model = new SchoolImpl();

        model.setId(soapModel.getId());
        model.setName(soapModel.getName());
        model.setAddress(soapModel.getAddress());
        model.setDistrict(soapModel.getDistrict());
        model.setCity(soapModel.getCity());
        model.setState(soapModel.getState());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<School> toModels(SchoolSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<School> models = new ArrayList<School>(soapModels.length);

        for (SchoolSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return School.class;
    }

    @Override
    public String getModelClassName() {
        return School.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("name", getName());
        attributes.put("address", getAddress());
        attributes.put("district", getDistrict());
        attributes.put("city", getCity());
        attributes.put("state", getState());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer id = (Integer) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String address = (String) attributes.get("address");

        if (address != null) {
            setAddress(address);
        }

        String district = (String) attributes.get("district");

        if (district != null) {
            setDistrict(district);
        }

        String city = (String) attributes.get("city");

        if (city != null) {
            setCity(city);
        }

        String state = (String) attributes.get("state");

        if (state != null) {
            setState(state);
        }
    }

    @JSON
    @Override
    public int getId() {
        return _id;
    }

    @Override
    public void setId(int id) {
        _id = id;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getAddress() {
        if (_address == null) {
            return StringPool.BLANK;
        } else {
            return _address;
        }
    }

    @Override
    public void setAddress(String address) {
        _address = address;
    }

    @JSON
    @Override
    public String getDistrict() {
        if (_district == null) {
            return StringPool.BLANK;
        } else {
            return _district;
        }
    }

    @Override
    public void setDistrict(String district) {
        _columnBitmask |= DISTRICT_COLUMN_BITMASK;

        if (_originalDistrict == null) {
            _originalDistrict = _district;
        }

        _district = district;
    }

    public String getOriginalDistrict() {
        return GetterUtil.getString(_originalDistrict);
    }

    @JSON
    @Override
    public String getCity() {
        if (_city == null) {
            return StringPool.BLANK;
        } else {
            return _city;
        }
    }

    @Override
    public void setCity(String city) {
        _columnBitmask |= CITY_COLUMN_BITMASK;

        if (_originalCity == null) {
            _originalCity = _city;
        }

        _city = city;
    }

    public String getOriginalCity() {
        return GetterUtil.getString(_originalCity);
    }

    @JSON
    @Override
    public String getState() {
        if (_state == null) {
            return StringPool.BLANK;
        } else {
            return _state;
        }
    }

    @Override
    public void setState(String state) {
        _columnBitmask |= STATE_COLUMN_BITMASK;

        if (_originalState == null) {
            _originalState = _state;
        }

        _state = state;
    }

    public String getOriginalState() {
        return GetterUtil.getString(_originalState);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public School toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (School) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SchoolImpl schoolImpl = new SchoolImpl();

        schoolImpl.setId(getId());
        schoolImpl.setName(getName());
        schoolImpl.setAddress(getAddress());
        schoolImpl.setDistrict(getDistrict());
        schoolImpl.setCity(getCity());
        schoolImpl.setState(getState());

        schoolImpl.resetOriginalValues();

        return schoolImpl;
    }

    @Override
    public int compareTo(School school) {
        int primaryKey = school.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof School)) {
            return false;
        }

        School school = (School) obj;

        int primaryKey = school.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        SchoolModelImpl schoolModelImpl = this;

        schoolModelImpl._originalDistrict = schoolModelImpl._district;

        schoolModelImpl._originalCity = schoolModelImpl._city;

        schoolModelImpl._originalState = schoolModelImpl._state;

        schoolModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<School> toCacheModel() {
        SchoolCacheModel schoolCacheModel = new SchoolCacheModel();

        schoolCacheModel.id = getId();

        schoolCacheModel.name = getName();

        String name = schoolCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            schoolCacheModel.name = null;
        }

        schoolCacheModel.address = getAddress();

        String address = schoolCacheModel.address;

        if ((address != null) && (address.length() == 0)) {
            schoolCacheModel.address = null;
        }

        schoolCacheModel.district = getDistrict();

        String district = schoolCacheModel.district;

        if ((district != null) && (district.length() == 0)) {
            schoolCacheModel.district = null;
        }

        schoolCacheModel.city = getCity();

        String city = schoolCacheModel.city;

        if ((city != null) && (city.length() == 0)) {
            schoolCacheModel.city = null;
        }

        schoolCacheModel.state = getState();

        String state = schoolCacheModel.state;

        if ((state != null) && (state.length() == 0)) {
            schoolCacheModel.state = null;
        }

        return schoolCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", address=");
        sb.append(getAddress());
        sb.append(", district=");
        sb.append(getDistrict());
        sb.append(", city=");
        sb.append(getCity());
        sb.append(", state=");
        sb.append(getState());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.a3groups.bts.services.model.School");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>address</column-name><column-value><![CDATA[");
        sb.append(getAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>district</column-name><column-value><![CDATA[");
        sb.append(getDistrict());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>city</column-name><column-value><![CDATA[");
        sb.append(getCity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>state</column-name><column-value><![CDATA[");
        sb.append(getState());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
